using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;
using System.Text.RegularExpressions;
using System.Threading.Tasks;

namespace _27._01._21_Log4netInserter
{
    public class Inserter
    {
        private string _filePath;


        public Inserter(string filePath)
        {
            _filePath = filePath;
        }

        public void Insert(string filePath)
        {
            if (!File.Exists(filePath))
                return;

            string theNewFile = string.Empty;
            string[] theFile = File.ReadAllLines(filePath);

            string fpWithoutExtension = filePath.Substring(0, filePath.LastIndexOf("."));
            string extension = filePath.Substring(filePath.LastIndexOf("."));
            File.Move(filePath, fpWithoutExtension + "_old_" + extension);

            for (int i = 0; i < theFile.Length; i++)
            {
                if (!theFile[i].Contains("class"))
                {
                    theNewFile += theFile[i] + Environment.NewLine;
                }
                else
                {
                    theNewFile += theFile[i] + Environment.NewLine;

                    int step = 0;
                    if (theFile[i].Contains("{"))
                    {
                        step = 2;
                    }

                    if (i + 1 < theFile.Length && Regex.Replace(theFile[i + 1], @"\s+", "") == "{")
                    {
                        theNewFile += theFile[i+1] + Environment.NewLine;
                        theFile[i + 1] = "";
                        step = 3;
                    }
                    for (int ii = 0; ii < step; ii++)
                        theNewFile += Environment.NewLine;

                    string insertStr = @"        private readonly log4net.ILog log = log4net.LogManager.GetLogger(System.Reflection.MethodBase.GetCurrentMethod().DeclaringType);";

                    theNewFile += "/// </summary>" + Environment.NewLine;
                    theNewFile += "/// this field generated by Log4NetInserter" + Environment.NewLine;
                    theNewFile += "/// </summary>" + Environment.NewLine;
                    theNewFile += insertStr + Environment.NewLine;                    
                }

                Regex regex = new Regex(@"(string)(\s+)([a-zA-Z0-9_\-\.]+)(\s+)([a-zA-Z0-9_\-\.]+|=)");
                Regex regexBeginningWhiteSpaces = new Regex(@"^(\s+)");
                if(!theFile[i].Contains("//") && !theFile[i].Contains("foreach") && !theFile[i].Contains("\"") && regex.IsMatch(theFile[i]))
                {
                    Match match = regex.Match(theFile[i]);
                    if(match.Success)
                    {
                        if (i + 1 < theFile.Length)
                        {
                            string beginningWhiteSpaces = string.Empty;
                            Match matchBeginningWhiteSpaces = regexBeginningWhiteSpaces.Match(theFile[i]);
                            if(matchBeginningWhiteSpaces.Success)
                            {
                                beginningWhiteSpaces = matchBeginningWhiteSpaces.Value;
                            }
                            string variable = match.Groups[match.Groups.Count - 3].Value;

                            theNewFile += "// The next line was generated by Log4NetInserter" + Environment.NewLine;
                            theNewFile += $"{Environment.NewLine}{beginningWhiteSpaces}log.Debug({variable});" + Environment.NewLine + Environment.NewLine;
                        }
                    }
                }
            }

            if(!File.Exists(filePath))
                File.WriteAllText(filePath, theNewFile);
        }





    }

}
